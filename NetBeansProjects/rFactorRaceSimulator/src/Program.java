
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sergio
 */
public class Program extends javax.swing.JFrame {

    private static String SIMULATORFOLDER = "";
    
    private static String CHAMPDATAFILE = "";
    
    private static String MOD = "";
    
    private static Grid CAMPEONATO = new Grid(); //La parrilla del campeonato (pilotos y equipos)
    
    private File currentfile;
    
    private int totalraces;
    /**
     * Creates new form Program
     */
    public Program() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch(Exception e) {}
        
        initComponents();
        setDefaultValues();
        setIcon();
        MOD = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        raceresults = new ux.DTable();
        jButton1 = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        simulateButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        simulationText = new javax.swing.JLabel();
        nextRaceButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        champPlayer = new javax.swing.JLabel();
        champPoints = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        champDisplay = new javax.swing.JLabel();
        selectChampButton = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        champStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jFrame1.setTitle("rFactor Race Simulator v1.0 - Race Results");
        jFrame1.setMinimumSize(new java.awt.Dimension(631, 858));
        jFrame1.setResizable(false);
        jFrame1.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                jFrame1WindowClosing(evt);
            }
        });

        raceresults.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        raceresults.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        raceresults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Pos.", "No.", "Driver", "Team", "Time/Retired", "Points"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        raceresults.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        raceresults.setFocusable(false);
        raceresults.setGridColor(new java.awt.Color(162, 169, 177));
        raceresults.setMinimumSize(new java.awt.Dimension(590, 704));
        raceresults.setPreferredSize(new java.awt.Dimension(590, 676));
        raceresults.setRequestFocusEnabled(false);
        raceresults.setRowHeight(26);
        raceresults.setRowSelectionAllowed(false);
        raceresults.getTableHeader().setResizingAllowed(false);
        raceresults.getTableHeader().setReorderingAllowed(false);

        jButton1.setText("CLOSE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(raceresults, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGap(280, 280, 280)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(raceresults, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        if (raceresults.getColumnModel().getColumnCount() > 0) {
            raceresults.getColumnModel().getColumn(0).setResizable(false);
            raceresults.getColumnModel().getColumn(1).setResizable(false);
            raceresults.getColumnModel().getColumn(2).setResizable(false);
            raceresults.getColumnModel().getColumn(3).setResizable(false);
            raceresults.getColumnModel().getColumn(4).setResizable(false);
            raceresults.getColumnModel().getColumn(5).setResizable(false);
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("rFactor Race Simulator v1.0");
        setResizable(false);

        simulateButton.setText("SIMULATE");
        simulateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulateButtonActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(153, 153, 153));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("© 2018 Sergio Rodríguez");

        simulationText.setText("Simulation in progress...");

        nextRaceButton.setText("Update");
        nextRaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextRaceButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Player:");

        champPlayer.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        champPlayer.setForeground(new java.awt.Color(255, 0, 0));
        champPlayer.setText("-- Not detected --");

        champPoints.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        champPoints.setForeground(new java.awt.Color(255, 0, 0));
        champPoints.setText("-- Not detected --");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Points: ");

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Championship Selected:");

        champDisplay.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        champDisplay.setForeground(new java.awt.Color(255, 0, 0));
        champDisplay.setText("-- None --");
        champDisplay.setToolTipText("");

        selectChampButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/seelc.png"))); // NOI18N
        selectChampButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectChampButtonMouseClicked(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Championship status:");

        champStatus.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        champStatus.setForeground(new java.awt.Color(255, 0, 0));
        champStatus.setText("-- Not detected --");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cartel-2.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nextRaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(simulationText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(selectChampButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(champStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(champDisplay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(champPlayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(champPoints, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(simulateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(80, 80, 80))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectChampButton)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(champDisplay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(champStatus))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(simulateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(champPlayer))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(champPoints))))
                .addGap(18, 18, 18)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(simulationText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextRaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void simulateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulateButtonActionPerformed
        simulationText.setVisible(true);
        
        //SIMULATION BEGIN
        File[] files = new File(SIMULATORFOLDER).listFiles();
        try {
            ParseGrid(files, 0);
            prepare_table();
            simulation_test();
        } catch (FileNotFoundException | InterruptedException ex) {
            Logger.getLogger(Program.class.getName()).log(Level.SEVERE, null, ex);
        }
        simulationText.setText("Simulation completed!");
        nextRaceButton.setEnabled(true);
        simulateButton.setText("DONE");
        simulateButton.setEnabled(false);
        
        this.setEnabled(false);
        jFrame1.setLocationRelativeTo(null);
        jFrame1.setVisible(true);
        update_championship();

    }//GEN-LAST:event_simulateButtonActionPerformed

    private void nextRaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextRaceButtonActionPerformed
        CAMPEONATO = new Grid();
        simulateButton.setText("SIMULATE");

        simulationText.setVisible(false);
        
        nextRaceButton.setEnabled(false);
        
        selectChampButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        try {
            cargar_campeonato(currentfile);
            if(champStatus.getText().equals("SEASON FINISHED")) {
                simulateButton.setEnabled(false);
            }
            else {
                simulateButton.setEnabled(true);
                simulateButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            }
        } catch (IOException ex) {
            Logger.getLogger(Program.class.getName()).log(Level.SEVERE, null, ex);
        }
        progressBar.setValue(0);
    }//GEN-LAST:event_nextRaceButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        this.dispose();
        jFrame1.dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void selectChampButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectChampButtonMouseClicked
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Championship Data Files (*.cch)", "cch");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            nextRaceButton.setEnabled(false);
            currentfile = chooser.getSelectedFile();
            try {
                cargar_campeonato(currentfile);
                if(champStatus.getText().equals("SEASON FINISHED")) {
                    simulateButton.setEnabled(false);
                }
                else {
                    simulateButton.setEnabled(true);
                    simulateButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                }
            } catch (IOException ex) {
                Logger.getLogger(Program.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_selectChampButtonMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setEnabled(true);
        jFrame1.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jFrame1WindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jFrame1WindowClosing
        this.setEnabled(true);
        jFrame1.dispose();
    }//GEN-LAST:event_jFrame1WindowClosing

    private void setDefaultValues() {
        this.setLocationRelativeTo(null);
        //1) No se ve el texto de simular y la tabla de resultados
        simulationText.setVisible(false);
        jFrame1.setVisible(false);
        
        //2) Avanzar y Simulate desactivados
        nextRaceButton.setEnabled(false);
        simulateButton.setEnabled(false);
        
        //3) Mouses en los botones
        selectChampButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }
    
    public void cargar_campeonato(File filename) throws IOException
    {
        BufferedReader br = new BufferedReader(new FileReader(filename));
        try {
            String line;
                
            int infoiscoming = 0;
            int playerinfo = 0;
            while ((line = br.readLine()) != null) {
                if(infoiscoming == 1) { //Nombre del Campeonato
                    String[] lineaChamp = line.split("=");
                    MOD = lineaChamp[1].substring(1, lineaChamp[1].length() - 1);
                    champDisplay.setText(MOD);
                    champDisplay.setForeground(Color.black);
                    update_game_location(filename);
                    set_totalraces();
                    infoiscoming++;
                }
                else if(infoiscoming > 1 && infoiscoming < 5) {
                    if(infoiscoming == 2) { //Para comprobar si el campeonato ya se ha acabado  
                        String[] lineaChamp3 = line.split("=");
                        if(lineaChamp3[1].equals("3")) {
                            champStatus.setText("SEASON FINISHED");
                            champStatus.setForeground(Color.black);
                            infoiscoming = 6;
                        }
                        else infoiscoming++;
                    }
                    else infoiscoming++;
                }
                else if(infoiscoming == 5) { //Carrera actual
                    String[] lineaChamp2 = line.split("=");
                    int carrera = Integer.parseInt(lineaChamp2[1]);
                    champStatus.setText("Round " + (carrera+1));
                    champStatus.setForeground(Color.black);
                    infoiscoming++;
                }
                
                else if(playerinfo == 1) { //Nombre del jugador
                    String[] lineaDriver1 = line.split("=");
                    champPlayer.setText(lineaDriver1[1].substring(1, lineaDriver1[1].length() - 1));
                    champPlayer.setForeground(Color.black);
                    playerinfo++;
                }
                else if(playerinfo > 1 && playerinfo < 4) {
                    playerinfo++;
                }
                else if(playerinfo == 4) { //Puntos del jugador
                    String[] lineaDriver2 = line.split("=");
                    champPoints.setText(lineaDriver2[1]);
                    champPoints.setForeground(Color.black);
                    playerinfo++;
                }
                else {
                    if(line.equals("[CAREERSEASON]")) {
                        infoiscoming++;
                    }
                    else if(line.equals("[PLAYER]")) {
                        playerinfo++;
                    }
                }
            }
            
            check_if_season_finished();
            
        } finally {
            br.close();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Program.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Program.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Program.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Program.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Program().setVisible(true);
            }
        });
        
        
    }
    
    //0 = NADA, 1 = DRIVERS, 2 = TEAMS
    public void ParseGrid(File[] files, int foldertype) throws FileNotFoundException {
        for (File file : files) {
            if (file.isDirectory()) {
                if(file.getName().equals("Drivers")) {
                    ParseGrid(file.listFiles(), 1); // Calls same method again.
                }
                else if(file.getName().equals("Teams")) {
                    ParseGrid(file.listFiles(), 2);
                }
            } else {
                if(foldertype == 1) { 
                    String url = SIMULATORFOLDER + "/Drivers/" + file.getName();
                    Driver d = createDriver(url);
                    CAMPEONATO.add_driver(d);
                }
                else if(foldertype == 2) {
                    String url = SIMULATORFOLDER + "/Teams/" + file.getName();
                    Team t = createTeam(url);
                    CAMPEONATO.add_team(t);
                }
            }
        }
    }
    
    public Team createTeam(String url) throws FileNotFoundException 
    {
        BufferedReader br = null;
        FileReader fr = null;
        Team t = new Team();

        try {

            //br = new BufferedReader(new FileReader(FILENAME));
            fr = new FileReader(url);
            br = new BufferedReader(fr);

            String sCurrentLine;

            while ((sCurrentLine = br.readLine()) != null) {
                    String[] parts = sCurrentLine.split(" = ");
                switch (parts[0]) {
                    case "Name":
                        t.set_name(parts[1]);
                        break;
                    case "Reliability":
                        t.set_reliability(Float.parseFloat(parts[1]));
                        break;
                    default:
                        break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (br != null) br.close();
                if (fr != null) fr.close();
            } catch (IOException ex) {
                    ex.printStackTrace();
            }
        }
        return t;
    }
    
    public Driver createDriver(String url) throws FileNotFoundException 
    {
        BufferedReader br = null;
        FileReader fr = null;
        Driver d = new Driver();

        try {

            //br = new BufferedReader(new FileReader(FILENAME));
            fr = new FileReader(url);
            br = new BufferedReader(fr);

            String sCurrentLine;

            while ((sCurrentLine = br.readLine()) != null) {
                    String[] parts = sCurrentLine.split(" = ");
                switch (parts[0]) {
                    case "Name":
                        d.set_name(parts[1]);
                        break;
                    case "Number":
                        d.set_number(Integer.parseInt(parts[1]));
                        break;
                    case "Nationality":
                        d.set_nationality(parts[1]);
                        break;
                    case "Team":
                        d.set_team(parts[1]);
                        break;
                    case "Performance":
                        String[] rendimiento = parts[1].split(" >> ");
                        for(int i = 0; i < rendimiento.length; ++i) {
                            d.add_performance(Float.parseFloat(rendimiento[i]));
                        }
                        break;
                    case "AvgCrash":
                        d.set_crashProbability(Float.parseFloat(parts[1]));
                        break;
                    default:
                        break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (br != null) br.close();
                if (fr != null) fr.close();
            } catch (IOException ex) {
                    ex.printStackTrace();
            }
        }
        return d;
    }
    
    private void prepare_table() { //EDIT COLUMN WIDTHS
        
        TableColumn col = raceresults.getColumnModel().getColumn(0);
        col.setMaxWidth(43);
        col.setMaxWidth(43);
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        raceresults.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        
        col = raceresults.getColumnModel().getColumn(1);
        col.setMinWidth(36);
        col.setMaxWidth(36);
        raceresults.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        
        col = raceresults.getColumnModel().getColumn(2);
        col.setMinWidth(155);
        col.setMaxWidth(155);
        raceresults.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        
        col = raceresults.getColumnModel().getColumn(3);
        col.setMinWidth(230);
        col.setMaxWidth(230);
        raceresults.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        
        col = raceresults.getColumnModel().getColumn(4);
        col.setMinWidth(92);
        col.setMaxWidth(92);
        raceresults.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        
        col = raceresults.getColumnModel().getColumn(5);
        col.setMinWidth(55);
        col.setMaxWidth(55);
        raceresults.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
    }
    
    public void simulation_test() throws InterruptedException {
        Map<Double, String> resultados = new TreeMap();
        progressBar.setValue(0);
        
        for(int i = 0; i < CAMPEONATO.get_parrilla().size(); ++i) 
        {
            Driver actual = CAMPEONATO.get_parrilla().get(i); //piloto actual
            double fiabilidad = CAMPEONATO.findTeamReliability(actual);
            int dnf = 0; //si 1 = accident, si 2 = mechanical
            
            //CÁLCULO DE POSIBILIDAD DNF
            Random rand = new Random();
            double crashprob = rand.nextDouble();
            if(crashprob <= actual.get_crashProbability()/100) dnf = 1;
            double dnfprob = rand.nextDouble();
            if(dnfprob <= fiabilidad/100) dnf = 2;
            
            if(dnf == 1) { //accident
                double posret = ThreadLocalRandom.current().nextDouble(250.0, 550.0);
                resultados.put(posret, actual.get_name() + "&" + actual.get_team() + "&Accident");
            }
            else if(dnf == 2) { //retired
                double posret = ThreadLocalRandom.current().nextDouble(250.0, 550.0);
                resultados.put(posret, actual.get_name() + "&" + actual.get_team() + "&Retired");
            }
            else { //ha acabado el GP
                double p1 = actual.get_performance().get(0);
                double perf1 = Math.round(p1 * 100.0) / 100.0;
                double p2 = actual.get_performance().get(1);
                double perf2 = Math.round(p2 * 100.0) / 100.0;
                double p3 = actual.get_performance().get(2);
                double perf3 = Math.round(p3 * 100.0) / 100.0;
                double p4 = actual.get_performance().get(3);
                double perf4 = Math.round(p4 * 100.0) / 100.0;
                double p5 = actual.get_performance().get(4);
                double perf5 = Math.round(p5 * 100.0) / 100.0;
                double rf = ThreadLocalRandom.current().nextDouble(0.0, 100.0);
                double resultadofinal = Math.round(rf * 100.0) / 100.0;
                
                //System.out.println("COMPARA: " + resultadofinal + " CON " + perf1 + " " + (perf1+perf2) + " " + (perf1+perf2+perf3) + " " + (perf1+perf2+perf3+perf4));
                
                boolean comparacion1 = (resultadofinal <= perf1);
                boolean comparacion2 = ((resultadofinal <= perf1+perf2) && (resultadofinal > perf1));
                boolean comparacion3 = ((resultadofinal <= perf1+perf2+perf3) && (resultadofinal > (perf1+perf2)));
                boolean comparacion4 = ((resultadofinal <= perf1+perf2+perf3+perf4) && (resultadofinal > (perf1+perf2+perf3)));
                
                double masexacto = ThreadLocalRandom.current().nextDouble(0.0, 100.0);
                double randomNum; //Distancia al líder
                
                if(comparacion1) {
                    if(masexacto <= perf1) { //Más probabilidad de Top5 suele salir más cerca del podio
                        randomNum = ThreadLocalRandom.current().nextDouble(0.1, 5.0);
                    }
                    else {
                        randomNum = ThreadLocalRandom.current().nextDouble(5.0, 8.0);
                    }
                }
                else if(comparacion2) {
                    if(perf1 > perf2) { //Piloto de Top5
                        randomNum = ThreadLocalRandom.current().nextDouble(8.0, 12.0);
                    }
                    else if(perf3 > perf2) { //Piloto de Top15 o más
                      if(perf3 > perf4) {
                          randomNum = ThreadLocalRandom.current().nextDouble(17.0, 17.5);
                      }
                      else if(perf4 > perf3 && perf4 > perf5) {
                          randomNum = ThreadLocalRandom.current().nextDouble(17.5, 18.0);
                      }
                      else {
                          randomNum = ThreadLocalRandom.current().nextDouble(18.0, 18.5);
                      }
                    }
                    else { //Piloto normal de Top10
                      randomNum = ThreadLocalRandom.current().nextDouble(10.0, 15.0);
                    }
                }
                else if(comparacion3) {
                    if(perf1 > perf2) { //Piloto de Top5
                        randomNum = ThreadLocalRandom.current().nextDouble(18.0, 18.5);
                    }
                    else if(perf2 > perf3) { //Piloto de Top10
                      randomNum = ThreadLocalRandom.current().nextDouble(19.0, 21.0);
                    }
                    else if(perf4 > perf3) { //Piloto normal >20
                        if(perf4 > perf5) { //Top20
                            randomNum = ThreadLocalRandom.current().nextDouble(22.5, 23.5);
                        }
                        else { //Top25
                            randomNum = ThreadLocalRandom.current().nextDouble(23.5, 24.0);
                        }
                    }
                    else { //Piloto normal de Top15
                      randomNum = ThreadLocalRandom.current().nextDouble(20.0, 22.5);
                    }
                }
                else if(comparacion4) {
                    if(perf1 > perf2) { //Piloto de Top5
                        randomNum = ThreadLocalRandom.current().nextDouble(24.0, 24.5);
                    }
                    else if(perf2 > perf1 && perf2 > perf3) { //Piloto de Top10
                      randomNum = ThreadLocalRandom.current().nextDouble(25.0, 26.0);
                    }
                    else if(perf3 > perf2 && perf3 > perf4) { //Piloto normal de Top15
                      randomNum = ThreadLocalRandom.current().nextDouble(26.0, 29.0);
                    }
                    else if(perf5 > perf4) { //Piloto normal de Top25
                      randomNum = ThreadLocalRandom.current().nextDouble(30.0, 32.0);
                    }
                    else { //Piloto normal de Top20
                      randomNum = ThreadLocalRandom.current().nextDouble(28.5, 31.0);
                    }
                }
                else {
                    if(masexacto <= perf5) { //Más probabilidad de quedar último suele salir más cerca de la cola
                        randomNum = ThreadLocalRandom.current().nextDouble(44.0, 55.0);
                    }
                    else {
                        randomNum = ThreadLocalRandom.current().nextDouble(32.0, 37.0);
                    }
                }
                resultados.put(randomNum, actual.get_name() + "&" + actual.get_team());
            }
            progressBar.setValue((int) i*100/CAMPEONATO.get_parrilla().size());
        }
        
        progressBar.setValue(100);
        
        int pos = 1;
        for(Map.Entry<Double, String> entry : resultados.entrySet()) {
            String pilotocausa[] = entry.getValue().split("&");
            String piloto = pilotocausa[0];
            String team = pilotocausa[1];
            if(entry.getKey() > 200) {
                String causa = pilotocausa[2];
                
                raceresults.setValueAt("Ret", pos, 0);
                raceresults.setValueAt(CAMPEONATO.findDriverNumber(piloto), pos, 1);
                raceresults.setValueAt(piloto, pos, 2);
                raceresults.setValueAt(team, pos, 3);
                raceresults.setValueAt(causa, pos, 4);
            }
            else {
                if(pos == 1) {
                    raceresults.setValueAt(pos, pos, 0);
                    raceresults.setValueAt(CAMPEONATO.findDriverNumber(piloto), pos, 1);
                    raceresults.setValueAt(piloto, pos, 2);
                    raceresults.setValueAt(team, pos, 3);
                    raceresults.setValueAt("20 Laps", pos, 4);
                }
                else {
                    NumberFormat formatter = new DecimalFormat("#0.000");
                    String textofinal = "+" + formatter.format(entry.getKey());
                    raceresults.setValueAt(pos, pos, 0);
                    raceresults.setValueAt(CAMPEONATO.findDriverNumber(piloto), pos, 1);
                    raceresults.setValueAt(piloto, pos, 2);
                    raceresults.setValueAt(team, pos, 3);
                    raceresults.setValueAt(textofinal, pos, 4);
                }
            }
            ++pos;
        }
    }
    
    private void update_game_location(File filename) throws MalformedURLException {
        
        String fileurl = filename.toURI().toURL().toString();
        String[] partesurl = fileurl.split("/");
        String urlgame = "";
        boolean found = false;
        int i = 0;
        while(i < partesurl.length && !found) {
            if(!partesurl[i].equals("file:")) {
                if(partesurl[i].equals("UserData")) {
                    found = true;
                }
                else urlgame += (partesurl[i] + '/');
            }
            ++i;
        }
        
        SIMULATORFOLDER = urlgame + "GameData/RaceSimulator/" + MOD + '/';
        
        CHAMPDATAFILE = urlgame + "rFm/" + MOD + ".rfm";
    }
    
    private void update_championship() {
        try {
            // input the file content to the StringBuffer "input"
            BufferedReader file = new BufferedReader(new FileReader(currentfile));
            String line;
            StringBuffer inputBuffer = new StringBuffer();
            
            boolean driverupdate = false; //En este turno hay update de pavo
            boolean updatingdriver = false; //En este turno se está actualizando pavo
            boolean driverupdated = false; //En este turno ya se ha actualizado al pavo
            int drivermissing = 4;
            String drivertemp = "";
            
            boolean champupdate = false; //En este turno hay update de campeonato
            boolean updatingchamp = false; //En este turno se está actualizando el campeonato
            int linesmissing = 5;
            boolean champupdated = false; //Ya se ha actualizado el numero de carreras

            while ((line = file.readLine()) != null) {
                if(champupdated) champupdate = false;
                if(driverupdated) {
                    driverupdate = false;
                    driverupdated = false;
                }
                
                if(line.equals("[CAREERSEASON]")) { //Actualizar num de carreras
                    updatingchamp = true;
                    linesmissing--;
                }
                
                else if(line.equals("[PLAYER]")) { //Actualizar puntos Kov
                    updatingdriver = true;
                    drivermissing--;
                }
                
                else if(line.length() > 10 && line.substring(0, 9).equals("[OPPONENT")) { //Actualizar puntos rivales
                    updatingdriver = true;
                    drivermissing--;
                }
                
                else if(updatingdriver) {
                    if(drivermissing == 0) {
                        driverupdate = true;
                        
                        int puntos = get_driver_points(drivertemp);
                        
                        String actu2[] = line.split("=");
                        int ptsnum = Integer.parseInt(actu2[1])+puntos;
                        String newpts = String.valueOf(ptsnum);
                        inputBuffer.append("SeasonPoints=" + newpts);
                        inputBuffer.append(System.getProperty("line.separator"));
                        
                        drivertemp = "";
                        drivermissing = 4;
                        updatingdriver = false;
                        driverupdated = true;
                    }
                    else if(drivermissing == 3) { //paraconseguir el nombre del piloto
                        drivertemp = line.split("\"")[1];
                        drivermissing--;
                    }
                    else drivermissing--;
                }
                
                else if(updatingchamp) {
                    if(linesmissing == 0) {
                        champupdate = true;
                        
                        String actu[] = line.split("=");
                        int racenum = Integer.parseInt(actu[1])+1;
                        String newrace = String.valueOf(racenum);
                        inputBuffer.append("CurrentRace=" + newrace);
                        inputBuffer.append(System.getProperty("line.separator"));
                        
                        updatingchamp = false;
                        champupdated = true;
                    }
                    else linesmissing--;
                }
                
                if(!champupdate && !driverupdate) {
                    inputBuffer.append(line);
                    inputBuffer.append(System.getProperty("line.separator"));
                }
            }
            String inputStr = inputBuffer.toString();

            file.close();
            
            //reemplazar archivo 
            FileOutputStream fileOut = new FileOutputStream(currentfile);
            fileOut.write(inputStr.getBytes());
            fileOut.close();

        } catch (IOException | NumberFormatException e) {
            System.out.println("Problem reading file.");
        }
    }
    
    private int get_driver_points(String piloto) {
        List<Integer> list = new ArrayList<>(Arrays.asList(25, 20, 16, 13, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));
        int puntos = 0;
        int i = 1;
        boolean found = false;
        while(i < 16 && !found) { //+ de 16 = 0 puntos asi que no vale la pena
            if(raceresults.getValueAt(i, 2).equals(piloto)) {
                puntos = list.get(i-1);
                found = true;
            }
            ++i;
        }
        
        return puntos;
    }
    
    private void set_totalraces() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader(CHAMPDATAFILE));
        try {
            String line;
            int count = -2;
            int numtracks = 0;
            boolean counting = false;
            boolean stop = false;
            while((line = br.readLine()) != null && !stop) {
                if(line.equals("  SceneOrder") || count == -1) {
                    count++;
                }
                if(count == 0) {
                    counting = true;
                }
                if(counting) {
                    if(line.equals("  }")) {
                        counting = false;
                        stop = true;
                        numtracks--;
                    }
                    else numtracks++;
                }
            }
            totalraces = numtracks;
            
        } finally {
            br.close();
        }
    }
    
    private void check_if_season_finished() {
        String partes[] = champStatus.getText().split(" ");
        if(Integer.parseInt(partes[1]) > totalraces) champStatus.setText("SEASON FINISHED");
        simulateButton.setEnabled(false);
        nextRaceButton.setEnabled(false);
        System.out.println(Integer.parseInt(partes[1]) + " " + totalraces);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel champDisplay;
    private javax.swing.JLabel champPlayer;
    private javax.swing.JLabel champPoints;
    private javax.swing.JLabel champStatus;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton nextRaceButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTable raceresults;
    private javax.swing.JLabel selectChampButton;
    private javax.swing.JButton simulateButton;
    private javax.swing.JLabel simulationText;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("small.png")));
    }
}
